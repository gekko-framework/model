<?php

use \Gekko\Model\PropertyDescriptor;
use \Gekko\Model\ModelRelationDescriptor;
use \Gekko\Model\PropertyRelationDescriptor;

require "Utilities.php";

$notOwnProperties = $model->namedRelationships()
    ->where(function (ModelRelationDescriptor $relation) {
        return $relation->kind === ModelRelationDescriptor::BelongsTo;
    })
    ->selectMany(function (ModelRelationDescriptor $relation) {
        return $relation->properties()->select(function (PropertyRelationDescriptor $propertyRelation) {
            return $propertyRelation->local;
        });
    })
    ->toArray();

$ownProperties = $model->properties()->where(function (PropertyDescriptor $property) use (&$notOwnProperties) {
    return !in_array($property->propertyName, $notOwnProperties);
});

?>
<?= '<?php' ?>

/*
 * (c) Leonardo Brugnara
 *
 * Full copyright and license information in LICENSE file.
 *
 * -------------------------------------------------------
 *
 * WARNING: This is an autogenerated file, you should NOT edit this file as all
 *  the changes will be lost on file regeneration.
 *  If you want to add custom code to this class, consider using the GEN_TRAIT option
 *  to generate a Trait.
 *
 */

namespace <?= $model->namespace ?>;

trait <?= $model->className . "Trait" . PHP_EOL; ?>
{
<?php foreach ($ownProperties as $property): ?>
    /**
     * @var <?= $property->type->raw() . ($property->is_array ? "[]" : "") . PHP_EOL ?>
     */
    private $<?= $property->propertyName  ?>;

<?php endforeach; ?>
<?php foreach ($model->namedRelationships() as $relation): ?>
    /**
     * @var <?= "\\{$relation->foreignModel}" . ($relation->kind === ModelRelationDescriptor::HasMany ? "[]" : "") . PHP_EOL ?>
     */
    private $<?= $relation->name  ?>;

<?php endforeach; ?>

    public function __construct()
    {
    }

<?php foreach ($ownProperties as $property): ?>
    <?php if (!$property->autoincrement): ?>

    /**
     * Set $<?= $property->propertyName?>'s value
     * 
     * @param <?= $property->is_array ? "array" : $property->type->raw() ?> $<?= $property->propertyName  ?> value to set
     */
    public function <?= to_setter_name($property)  ?>(<?= $property->is_array ? "array" : $property->type->raw() ?> $<?= $property->propertyName  ?>)
    {
        $this-><?= $property->propertyName  ?> = $<?= $property->propertyName  ?>;
    }
    <?php endif; ?>

    /**
     * Get $<?= $property->propertyName?>'s value
     * 
     * @return <?= $property->is_array ? "array" : $property->type->raw() ?> current value
     */
    public function <?= to_getter_name($property)  ?>() : <?= $property->is_array ? "array" : $property->type->raw() ?>

    {
        return $this-><?= $property->propertyName  ?>;
    }

<?php endforeach; ?>
<?php foreach ($model->namedRelationships() as $relation): ?>
    /**
     * Set $<?= $relation->name ?>'s value
     * 
     * @param \<?= $relation->foreignModel ?><?= ($relation->kind === ModelRelationDescriptor::HasMany ? "[]" : "") ?> $<?= $relation->name  ?> value to set
     */
    public function set<?= sanitize_name($relation->name);  ?>(<?= $relation->kind === ModelRelationDescriptor::HasMany ? "array" : "\\{$relation->foreignModel}" ?> $<?= $relation->name  ?>)
    {
        $this-><?= $relation->name  ?> = $<?= $relation->name  ?>;
    }

    /**
     * Get $<?= $relation->name?>'s value
     * 
     * @return \<?= $relation->foreignModel ?><?= ($relation->kind === ModelRelationDescriptor::HasMany ? "[]" : "") ?> current value
     */
    public function get<?= sanitize_name($relation->name);  ?>() : <?= $relation->kind === ModelRelationDescriptor::HasMany ? "array" : "\\{$relation->foreignModel}" ?>

    {
        return $this-><?= $relation->name  ?>;
    }

<?php endforeach; ?>
}
